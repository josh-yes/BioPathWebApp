# docker-compose.yaml
#
# Docker compose file for launching and running both frontend and backend
# docker containers for the Biopath app

version: "3.2"
services:
  # Zach B - No need for redis at the moment, but we'll leave this 
  #           here in case we use it in the future
  # redis:
  #   restart: always
  #   image: redis:5
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - db-net

  db:
    # Josh S. - Dockerized the DB and changed to postgres
    container_name: postgres
    image: postgres:14.1-alpine
    restart: always
    volumes: # volume for database persistence while container is down
             # you must set the environment variable BIOPATH_ROOT_PATH on your machine
             #  for me this was just
             #   'export BIOPATH_ROOT_PATH="~/Users/joshuaschmitz/Projects/BioPath"'
      - "${BIOPATH_ROOT_PATH}/postgres:/var/lib/postgresql/data/"
    environment:
      # these are the same as those in backend container
      - POSTGRES_USER=username
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=BioPath
    ports:
      - '5432:5432'

  backend:
    # Josh S - Renamed to backend for consistency purposes
    # Zach B - We ran into constant restart issues, fixed when we removed this
    # restart: always
    container_name: backend
    platform: linux/amd64
    # Josh S - Edited command to wait until DB is ready to accept connections before migrating and then starting server
    #   Not sure if we should actually makemigrations and migrate every startup, but it works for now
    #command: bash -c "/app/api/startup.sh"
    environment:
      # TODO: change username, password, email
      # django admin login
      - DJANGO_ADMIN_USER=root
      - DJANGO_ADMIN_PASS=root
      - DJANGO_ADMIN_EMAIL=root@root.com

      # These are the same as those in db container
      # TODO: change username, password
      - POSTGRES_DB=BioPath
      - POSTGRES_USER=username
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB_HOST=db
    build:
      context: ./backend/
      dockerfile: Dockerfile
    image: backend
    ports:
      - "8000:8000"

    # comment out dependancy for now
    # depends_on:
    #   - db
      # - redis
    # networks:
    #   - db-net

  frontend:
    container_name: frontend
    restart: always
    command : npm start
    build:
      context: ./frontend/
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    stdin_open: true
    # depends_on:
    #   - backend
    # networks:
    #   - db-net

  # AWS specific configuration details
  # logging:
  #   driver: awslogs 
  #   options:
  #     awslogs-group: BiopathLogGroup 
  #     awslogs-region: us-west-2
  #     awslogs-stream-prefix:


# Josh S - This was unneeded for now; removed to decrease complexity
# networks:
#   db-net:
#     driver: bridge